/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class acswig {
  public static void allegro_set_palette(RGB pal) {
    acswigPINVOKE.allegro_set_palette(RGB.getCPtr(pal));
  }

  public static void destroy_bitmap(BITMAP bmp) {
    acswigPINVOKE.destroy_bitmap(BITMAP.getCPtr(bmp));
  }

  public static BITMAP create_bitmap_ex(int bpp, int width, int height) {
    IntPtr cPtr = acswigPINVOKE.create_bitmap_ex(bpp, width, height);
    BITMAP ret = (cPtr == IntPtr.Zero) ? null : new BITMAP(cPtr, false);
    return ret;
  }

  public static BITMAP abuf {
    set {
      acswigPINVOKE.abuf_set(BITMAP.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.abuf_get();
      BITMAP ret = (cPtr == IntPtr.Zero) ? null : new BITMAP(cPtr, false);
      return ret;
    } 
  }

  public static void blit(BITMAP source, BITMAP dest, int source_x, int source_y, int dest_x, int dest_y, int width, int height) {
    acswigPINVOKE.blit(BITMAP.getCPtr(source), BITMAP.getCPtr(dest), source_x, source_y, dest_x, dest_y, width, height);
  }

  public static void select_palette(RGB pal) {
    acswigPINVOKE.select_palette(RGB.getCPtr(pal));
  }

  public static void unselect_palette() {
    acswigPINVOKE.unselect_palette();
  }

  public static void set_color_conversion(int mode) {
    acswigPINVOKE.set_color_conversion(mode);
  }

  public static int get_color_conversion() {
    int ret = acswigPINVOKE.get_color_conversion();
    return ret;
  }

  public static int bitmap_color_depth(BITMAP bmp) {
    int ret = acswigPINVOKE.bitmap_color_depth(BITMAP.getCPtr(bmp));
    return ret;
  }

  public static RGB get_palette_entry(int index) {
    RGB ret = new RGB(acswigPINVOKE.get_palette_entry(index), true);
    return ret;
  }

  public static void set_palette_entry(int index, RGB value) {
    acswigPINVOKE.set_palette_entry(index, RGB.getCPtr(value));
    if (acswigPINVOKE.SWIGPendingException.Pending) throw acswigPINVOKE.SWIGPendingException.Retrieve();
  }

  public static int antiAliasFonts {
    set {
      acswigPINVOKE.antiAliasFonts_set(value);
    } 
    get {
      int ret = acswigPINVOKE.antiAliasFonts_get();
      return ret;
    } 
  }

  public static int mousex {
    set {
      acswigPINVOKE.mousex_set(value);
    } 
    get {
      int ret = acswigPINVOKE.mousex_get();
      return ret;
    } 
  }

  public static int mousey {
    set {
      acswigPINVOKE.mousey_set(value);
    } 
    get {
      int ret = acswigPINVOKE.mousey_get();
      return ret;
    } 
  }

  public static int sxmult {
    set {
      acswigPINVOKE.sxmult_set(value);
    } 
    get {
      int ret = acswigPINVOKE.sxmult_get();
      return ret;
    } 
  }

  public static int symult {
    set {
      acswigPINVOKE.symult_set(value);
    } 
    get {
      int ret = acswigPINVOKE.symult_get();
      return ret;
    } 
  }

  public static int dsc_want_hires {
    set {
      acswigPINVOKE.dsc_want_hires_set(value);
    } 
    get {
      int ret = acswigPINVOKE.dsc_want_hires_get();
      return ret;
    } 
  }

  public static bool enable_greyed_out_masks {
    set {
      acswigPINVOKE.enable_greyed_out_masks_set(value);
    } 
    get {
      bool ret = acswigPINVOKE.enable_greyed_out_masks_get();
      return ret;
    } 
  }

  public static bool outlineGuiObjects {
    set {
      acswigPINVOKE.outlineGuiObjects_set(value);
    } 
    get {
      bool ret = acswigPINVOKE.outlineGuiObjects_get();
      return ret;
    } 
  }

  public static RGB palette {
    set {
      acswigPINVOKE.palette_set(RGB.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.palette_get();
      RGB ret = (cPtr == IntPtr.Zero) ? null : new RGB(cPtr, false);
      return ret;
    } 
  }

  public static GameSetupStruct thisgame {
    set {
      acswigPINVOKE.thisgame_set(GameSetupStruct.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.thisgame_get();
      GameSetupStruct ret = (cPtr == IntPtr.Zero) ? null : new GameSetupStruct(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_GUIMain tempgui {
    set {
      acswigPINVOKE.tempgui_set(SWIGTYPE_p_GUIMain.getCPtr(value));
      if (acswigPINVOKE.SWIGPendingException.Pending) throw acswigPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_GUIMain ret = new SWIGTYPE_p_GUIMain(acswigPINVOKE.tempgui_get(), true);
      if (acswigPINVOKE.SWIGPendingException.Pending) throw acswigPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static string sprsetname {
    set {
      acswigPINVOKE.sprsetname_set(value);
    } 
    get {
      string ret = acswigPINVOKE.sprsetname_get();
      return ret;
    } 
  }

  public static string clibendsig {
    set {
      acswigPINVOKE.clibendsig_set(value);
    } 
    get {
      string ret = acswigPINVOKE.clibendsig_get();
      return ret;
    } 
  }

  public static string old_editor_data_file {
    set {
      acswigPINVOKE.old_editor_data_file_set(value);
    } 
    get {
      string ret = acswigPINVOKE.old_editor_data_file_get();
      return ret;
    } 
  }

  public static string new_editor_data_file {
    set {
      acswigPINVOKE.new_editor_data_file_set(value);
    } 
    get {
      string ret = acswigPINVOKE.new_editor_data_file_get();
      return ret;
    } 
  }

  public static string old_editor_main_game_file {
    set {
      acswigPINVOKE.old_editor_main_game_file_set(value);
    } 
    get {
      string ret = acswigPINVOKE.old_editor_main_game_file_get();
      return ret;
    } 
  }

  public static string TEMPLATE_LOCK_FILE {
    set {
      acswigPINVOKE.TEMPLATE_LOCK_FILE_set(value);
    } 
    get {
      string ret = acswigPINVOKE.TEMPLATE_LOCK_FILE_get();
      return ret;
    } 
  }

  public static string ROOM_TEMPLATE_ID_FILE {
    set {
      acswigPINVOKE.ROOM_TEMPLATE_ID_FILE_set(value);
    } 
    get {
      string ret = acswigPINVOKE.ROOM_TEMPLATE_ID_FILE_get();
      return ret;
    } 
  }

  public static bool spritesModified {
    set {
      acswigPINVOKE.spritesModified_set(value);
    } 
    get {
      bool ret = acswigPINVOKE.spritesModified_get();
      return ret;
    } 
  }

  public static roomstruct thisroom {
    set {
      acswigPINVOKE.thisroom_set(roomstruct.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.thisroom_get();
      roomstruct ret = (cPtr == IntPtr.Zero) ? null : new roomstruct(cPtr, false);
      return ret;
    } 
  }

  public static bool roomModified {
    set {
      acswigPINVOKE.roomModified_set(value);
    } 
    get {
      bool ret = acswigPINVOKE.roomModified_get();
      return ret;
    } 
  }

  public static BITMAP drawBuffer {
    set {
      acswigPINVOKE.drawBuffer_set(BITMAP.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.drawBuffer_get();
      BITMAP ret = (cPtr == IntPtr.Zero) ? null : new BITMAP(cPtr, false);
      return ret;
    } 
  }

  public static BITMAP undoBuffer {
    set {
      acswigPINVOKE.undoBuffer_set(BITMAP.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.undoBuffer_get();
      BITMAP ret = (cPtr == IntPtr.Zero) ? null : new BITMAP(cPtr, false);
      return ret;
    } 
  }

  public static int loaded_room_number {
    set {
      acswigPINVOKE.loaded_room_number_set(value);
    } 
    get {
      int ret = acswigPINVOKE.loaded_room_number_get();
      return ret;
    } 
  }

  public static int numScriptModules {
    set {
      acswigPINVOKE.numScriptModules_set(value);
    } 
    get {
      int ret = acswigPINVOKE.numScriptModules_get();
      return ret;
    } 
  }

  public static SWIGTYPE_p_ScriptModule scModules {
    set {
      acswigPINVOKE.scModules_set(SWIGTYPE_p_ScriptModule.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.scModules_get();
      SWIGTYPE_p_ScriptModule ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_ScriptModule(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_DialogTopic dialog {
    set {
      acswigPINVOKE.dialog_set(SWIGTYPE_p_DialogTopic.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.dialog_get();
      SWIGTYPE_p_DialogTopic ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_DialogTopic(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_p_char dlgscript {
    set {
      acswigPINVOKE.dlgscript_set(SWIGTYPE_p_p_char.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.dlgscript_get();
      SWIGTYPE_p_p_char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_p_char(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_GUIMain guis {
    set {
      acswigPINVOKE.guis_set(SWIGTYPE_p_GUIMain.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.guis_get();
      SWIGTYPE_p_GUIMain ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_GUIMain(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_ViewStruct272 oldViews {
    set {
      acswigPINVOKE.oldViews_set(SWIGTYPE_p_ViewStruct272.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.oldViews_get();
      SWIGTYPE_p_ViewStruct272 ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_ViewStruct272(cPtr, false);
      return ret;
    } 
  }

  public static SWIGTYPE_p_ViewStruct newViews {
    set {
      acswigPINVOKE.newViews_set(SWIGTYPE_p_ViewStruct.getCPtr(value));
    } 
    get {
      IntPtr cPtr = acswigPINVOKE.newViews_get();
      SWIGTYPE_p_ViewStruct ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_ViewStruct(cPtr, false);
      return ret;
    } 
  }

  public static int numNewViews {
    set {
      acswigPINVOKE.numNewViews_set(value);
    } 
    get {
      int ret = acswigPINVOKE.numNewViews_get();
      return ret;
    } 
  }

  public static SWIGTYPE_p_FILE clibfopen(string filnamm, string fmt) {
    IntPtr cPtr = acswigPINVOKE.clibfopen(filnamm, fmt);
    SWIGTYPE_p_FILE ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_FILE(cPtr, false);
    return ret;
  }

  public static int csetlib(string fileName, string password) {
    int ret = acswigPINVOKE.csetlib(fileName, password);
    return ret;
  }

  public static int clibGetNumFiles() {
    int ret = acswigPINVOKE.clibGetNumFiles();
    return ret;
  }

  public static string clibGetFileName(int arg0) {
    string ret = acswigPINVOKE.clibGetFileName(arg0);
    return ret;
  }

  public static string clibgetoriginalfilename() {
    string ret = acswigPINVOKE.clibgetoriginalfilename();
    return ret;
  }

  public static int cfopenpriority {
    set {
      acswigPINVOKE.cfopenpriority_set(value);
    } 
    get {
      int ret = acswigPINVOKE.cfopenpriority_get();
      return ret;
    } 
  }

  public static bool Scintilla_RegisterClasses(IntPtr hInstance) {
    bool ret = acswigPINVOKE.Scintilla_RegisterClasses(hInstance);
    return ret;
  }

  public static int Scintilla_LinkLexers() {
    int ret = acswigPINVOKE.Scintilla_LinkLexers();
    return ret;
  }

  public static bool ShouldAntiAliasText() {
    bool ret = acswigPINVOKE.ShouldAntiAliasText();
    return ret;
  }

  public static void serialize_room_interactions(SWIGTYPE_p_FILE arg0) {
    acswigPINVOKE.serialize_room_interactions(SWIGTYPE_p_FILE.getCPtr(arg0));
  }

  public static void ThrowManagedException(string message) {
    acswigPINVOKE.ThrowManagedException(message);
  }

  public static void Cstretch_blit(BITMAP src, BITMAP dst, int sx, int sy, int sw, int sh, int dx, int dy, int dw, int dh) {
    acswigPINVOKE.Cstretch_blit(BITMAP.getCPtr(src), BITMAP.getCPtr(dst), sx, sy, sw, sh, dx, dy, dw, dh);
  }

  public static void Cstretch_sprite(BITMAP dst, BITMAP src, int x, int y, int w, int h) {
    acswigPINVOKE.Cstretch_sprite(BITMAP.getCPtr(dst), BITMAP.getCPtr(src), x, y, w, h);
  }

  public static bool reload_font(int curFont) {
    bool ret = acswigPINVOKE.reload_font(curFont);
    return ret;
  }

  public static void drawBlockScaledAt(int hdc, BITMAP todraw, int x, int y, int scaleFactor) {
    acswigPINVOKE.drawBlockScaledAt(hdc, BITMAP.getCPtr(todraw), x, y, scaleFactor);
  }

  public static void write_log(string arg0) {
    acswigPINVOKE.write_log(arg0);
  }

  public static bool initialize_native() {
    bool ret = acswigPINVOKE.initialize_native();
    return ret;
  }

  public static void update_font_sizes() {
    acswigPINVOKE.update_font_sizes();
  }

  public static void copy_global_palette_to_room_palette() {
    acswigPINVOKE.copy_global_palette_to_room_palette();
  }

  public static bool reset_sprite_file() {
    bool ret = acswigPINVOKE.reset_sprite_file();
    return ret;
  }

  public static BITMAP get_bitmap_for_mask(roomstruct roomptr, RoomAreaMask maskType) {
    IntPtr cPtr = acswigPINVOKE.get_bitmap_for_mask(roomstruct.getCPtr(roomptr), (int)maskType);
    BITMAP ret = (cPtr == IntPtr.Zero) ? null : new BITMAP(cPtr, false);
    return ret;
  }

  public static void validate_mask(BITMAP toValidate, string name, int maxColour) {
    acswigPINVOKE.validate_mask(BITMAP.getCPtr(toValidate), name, maxColour);
  }

  public static void set_rgb_mask_from_alpha_channel(BITMAP image) {
    acswigPINVOKE.set_rgb_mask_from_alpha_channel(BITMAP.getCPtr(image));
  }

  public static void set_opaque_alpha_channel(BITMAP image) {
    acswigPINVOKE.set_opaque_alpha_channel(BITMAP.getCPtr(image));
  }

  public static void fix_block(BITMAP todraw) {
    acswigPINVOKE.fix_block(BITMAP.getCPtr(todraw));
  }

  public static void sort_out_transparency(BITMAP toimp, int sprite_import_method, RGB itspal, bool useBgSlots, int importedColourDepth) {
    acswigPINVOKE.sort_out_transparency(BITMAP.getCPtr(toimp), sprite_import_method, RGB.getCPtr(itspal), useBgSlots, importedColourDepth);
  }

  public static void SetNewSprite(int slot, BITMAP sprit) {
    acswigPINVOKE.SetNewSprite(slot, BITMAP.getCPtr(sprit));
  }

  public static BITMAP get_sprite(int spnr) {
    IntPtr cPtr = acswigPINVOKE.get_sprite(spnr);
    BITMAP ret = (cPtr == IntPtr.Zero) ? null : new BITMAP(cPtr, false);
    return ret;
  }

  public static roomstruct cast_to_roomstruct(IntPtr voidptr) {
    IntPtr cPtr = acswigPINVOKE.cast_to_roomstruct(voidptr);
    roomstruct ret = (cPtr == IntPtr.Zero) ? null : new roomstruct(cPtr, false);
    return ret;
  }

  public static BITMAP get_bitmap_for_mask_from_void(IntPtr voidptr, RoomAreaMask maskType) {
    IntPtr cPtr = acswigPINVOKE.get_bitmap_for_mask_from_void(voidptr, (int)maskType);
    BITMAP ret = (cPtr == IntPtr.Zero) ? null : new BITMAP(cPtr, false);
    return ret;
  }

  public static readonly int COLORCONV_KEEP_TRANS = acswigPINVOKE.COLORCONV_KEEP_TRANS_get();
  public static readonly int PAL_SIZE = acswigPINVOKE.PAL_SIZE_get();
  public static readonly int SIMP_INDEX0 = acswigPINVOKE.SIMP_INDEX0_get();
  public static readonly int SIMP_TOPLEFT = acswigPINVOKE.SIMP_TOPLEFT_get();
  public static readonly int SIMP_BOTLEFT = acswigPINVOKE.SIMP_BOTLEFT_get();
  public static readonly int SIMP_TOPRIGHT = acswigPINVOKE.SIMP_TOPRIGHT_get();
  public static readonly int SIMP_BOTRIGHT = acswigPINVOKE.SIMP_BOTRIGHT_get();
  public static readonly int SIMP_LEAVEALONE = acswigPINVOKE.SIMP_LEAVEALONE_get();
  public static readonly int SIMP_NONE = acswigPINVOKE.SIMP_NONE_get();
  public static readonly int MAX_INIT_SPR = acswigPINVOKE.MAX_INIT_SPR_get();
  public static readonly int MAX_OBJ = acswigPINVOKE.MAX_OBJ_get();
  public static readonly int NUM_MISC = acswigPINVOKE.NUM_MISC_get();
  public static readonly int MAXMESS = acswigPINVOKE.MAXMESS_get();
  public static readonly int NUMOTCON = acswigPINVOKE.NUMOTCON_get();
  public static readonly int NUM_CONDIT = acswigPINVOKE.NUM_CONDIT_get();
  public static readonly int MAX_HOTSPOTS = acswigPINVOKE.MAX_HOTSPOTS_get();
  public static readonly int MAX_REGIONS = acswigPINVOKE.MAX_REGIONS_get();
  public static readonly int MAX_SCRIPT_NAME_LEN = acswigPINVOKE.MAX_SCRIPT_NAME_LEN_get();
  public static readonly int MAX_WALK_AREAS = acswigPINVOKE.MAX_WALK_AREAS_get();
  public static readonly int MAXPOINTS = acswigPINVOKE.MAXPOINTS_get();
  public static readonly int MAX_SPRITES = acswigPINVOKE.MAX_SPRITES_get();
  public static readonly int MAX_CURSOR = acswigPINVOKE.MAX_CURSOR_get();
  public static readonly int PAL_GAMEWIDE = acswigPINVOKE.PAL_GAMEWIDE_get();
  public static readonly int PAL_LOCKED = acswigPINVOKE.PAL_LOCKED_get();
  public static readonly int PAL_BACKGROUND = acswigPINVOKE.PAL_BACKGROUND_get();
  public static readonly int MAXGLOBALMES = acswigPINVOKE.MAXGLOBALMES_get();
  public static readonly int MAXLANGUAGE = acswigPINVOKE.MAXLANGUAGE_get();
  public static readonly int MAX_FONTS = acswigPINVOKE.MAX_FONTS_get();
  public static readonly int OPT_DEBUGMODE = acswigPINVOKE.OPT_DEBUGMODE_get();
  public static readonly int OPT_SCORESOUND = acswigPINVOKE.OPT_SCORESOUND_get();
  public static readonly int OPT_WALKONLOOK = acswigPINVOKE.OPT_WALKONLOOK_get();
  public static readonly int OPT_DIALOGIFACE = acswigPINVOKE.OPT_DIALOGIFACE_get();
  public static readonly int OPT_ANTIGLIDE = acswigPINVOKE.OPT_ANTIGLIDE_get();
  public static readonly int OPT_TWCUSTOM = acswigPINVOKE.OPT_TWCUSTOM_get();
  public static readonly int OPT_DIALOGGAP = acswigPINVOKE.OPT_DIALOGGAP_get();
  public static readonly int OPT_NOSKIPTEXT = acswigPINVOKE.OPT_NOSKIPTEXT_get();
  public static readonly int OPT_DISABLEOFF = acswigPINVOKE.OPT_DISABLEOFF_get();
  public static readonly int OPT_ALWAYSSPCH = acswigPINVOKE.OPT_ALWAYSSPCH_get();
  public static readonly int OPT_SPEECHTYPE = acswigPINVOKE.OPT_SPEECHTYPE_get();
  public static readonly int OPT_PIXPERFECT = acswigPINVOKE.OPT_PIXPERFECT_get();
  public static readonly int OPT_NOWALKMODE = acswigPINVOKE.OPT_NOWALKMODE_get();
  public static readonly int OPT_LETTERBOX = acswigPINVOKE.OPT_LETTERBOX_get();
  public static readonly int OPT_FIXEDINVCURSOR = acswigPINVOKE.OPT_FIXEDINVCURSOR_get();
  public static readonly int OPT_NOLOSEINV = acswigPINVOKE.OPT_NOLOSEINV_get();
  public static readonly int OPT_NOSCALEFNT = acswigPINVOKE.OPT_NOSCALEFNT_get();
  public static readonly int OPT_SPLITRESOURCES = acswigPINVOKE.OPT_SPLITRESOURCES_get();
  public static readonly int OPT_ROTATECHARS = acswigPINVOKE.OPT_ROTATECHARS_get();
  public static readonly int OPT_FADETYPE = acswigPINVOKE.OPT_FADETYPE_get();
  public static readonly int OPT_HANDLEINVCLICKS = acswigPINVOKE.OPT_HANDLEINVCLICKS_get();
  public static readonly int OPT_MOUSEWHEEL = acswigPINVOKE.OPT_MOUSEWHEEL_get();
  public static readonly int OPT_DIALOGNUMBERED = acswigPINVOKE.OPT_DIALOGNUMBERED_get();
  public static readonly int OPT_DIALOGUPWARDS = acswigPINVOKE.OPT_DIALOGUPWARDS_get();
  public static readonly int OPT_CROSSFADEMUSIC = acswigPINVOKE.OPT_CROSSFADEMUSIC_get();
  public static readonly int OPT_ANTIALIASFONTS = acswigPINVOKE.OPT_ANTIALIASFONTS_get();
  public static readonly int OPT_THOUGHTGUI = acswigPINVOKE.OPT_THOUGHTGUI_get();
  public static readonly int OPT_TURNTOFACELOC = acswigPINVOKE.OPT_TURNTOFACELOC_get();
  public static readonly int OPT_RIGHTLEFTWRITE = acswigPINVOKE.OPT_RIGHTLEFTWRITE_get();
  public static readonly int OPT_DUPLICATEINV = acswigPINVOKE.OPT_DUPLICATEINV_get();
  public static readonly int OPT_SAVESCREENSHOT = acswigPINVOKE.OPT_SAVESCREENSHOT_get();
  public static readonly int OPT_PORTRAITSIDE = acswigPINVOKE.OPT_PORTRAITSIDE_get();
  public static readonly int OPT_STRICTSCRIPTING = acswigPINVOKE.OPT_STRICTSCRIPTING_get();
  public static readonly int OPT_LEFTTORIGHTEVAL = acswigPINVOKE.OPT_LEFTTORIGHTEVAL_get();
  public static readonly int OPT_COMPRESSSPRITES = acswigPINVOKE.OPT_COMPRESSSPRITES_get();
  public static readonly int OPT_STRICTSTRINGS = acswigPINVOKE.OPT_STRICTSTRINGS_get();
  public static readonly int OPT_NEWGUIALPHA = acswigPINVOKE.OPT_NEWGUIALPHA_get();
  public static readonly int OPT_RUNGAMEDLGOPTS = acswigPINVOKE.OPT_RUNGAMEDLGOPTS_get();
  public static readonly int OPT_NATIVECOORDINATES = acswigPINVOKE.OPT_NATIVECOORDINATES_get();
  public static readonly int OPT_OLDTALKANIMSPD = acswigPINVOKE.OPT_OLDTALKANIMSPD_get();
  public static readonly int OPT_HIGHESTOPTION = acswigPINVOKE.OPT_HIGHESTOPTION_get();
  public static readonly int OPT_NOMODMUSIC = acswigPINVOKE.OPT_NOMODMUSIC_get();
  public static readonly int OPT_LIPSYNCTEXT = acswigPINVOKE.OPT_LIPSYNCTEXT_get();
  public static readonly int PORTRAIT_LEFT = acswigPINVOKE.PORTRAIT_LEFT_get();
  public static readonly int PORTRAIT_RIGHT = acswigPINVOKE.PORTRAIT_RIGHT_get();
  public static readonly int PORTRAIT_ALTERNATE = acswigPINVOKE.PORTRAIT_ALTERNATE_get();
  public static readonly int PORTRAIT_XPOSITION = acswigPINVOKE.PORTRAIT_XPOSITION_get();
  public static readonly int FADE_NORMAL = acswigPINVOKE.FADE_NORMAL_get();
  public static readonly int FADE_INSTANT = acswigPINVOKE.FADE_INSTANT_get();
  public static readonly int FADE_DISSOLVE = acswigPINVOKE.FADE_DISSOLVE_get();
  public static readonly int FADE_BOXOUT = acswigPINVOKE.FADE_BOXOUT_get();
  public static readonly int FADE_CROSSFADE = acswigPINVOKE.FADE_CROSSFADE_get();
  public static readonly int FADE_LAST = acswigPINVOKE.FADE_LAST_get();
  public static readonly int SPF_640x400 = acswigPINVOKE.SPF_640x400_get();
  public static readonly int SPF_HICOLOR = acswigPINVOKE.SPF_HICOLOR_get();
  public static readonly int SPF_DYNAMICALLOC = acswigPINVOKE.SPF_DYNAMICALLOC_get();
  public static readonly int SPF_TRUECOLOR = acswigPINVOKE.SPF_TRUECOLOR_get();
  public static readonly int SPF_ALPHACHANNEL = acswigPINVOKE.SPF_ALPHACHANNEL_get();
  public static readonly int SPF_HADALPHACHANNEL = acswigPINVOKE.SPF_HADALPHACHANNEL_get();
  public static readonly int FFLG_SIZEMASK = acswigPINVOKE.FFLG_SIZEMASK_get();
  public static readonly int FONT_OUTLINE_AUTO = acswigPINVOKE.FONT_OUTLINE_AUTO_get();
  public static readonly int MAX_FONT_SIZE = acswigPINVOKE.MAX_FONT_SIZE_get();
  public static readonly int MAXVIEWNAMELENGTH = acswigPINVOKE.MAXVIEWNAMELENGTH_get();
  public static readonly int MAXLIPSYNCFRAMES = acswigPINVOKE.MAXLIPSYNCFRAMES_get();
  public static readonly int MAX_GUID_LENGTH = acswigPINVOKE.MAX_GUID_LENGTH_get();
  public static readonly int MAX_SG_EXT_LENGTH = acswigPINVOKE.MAX_SG_EXT_LENGTH_get();
  public static readonly int MAX_SG_FOLDER_LEN = acswigPINVOKE.MAX_SG_FOLDER_LEN_get();
  public static readonly int SAVEBUFFERSIZE = acswigPINVOKE.SAVEBUFFERSIZE_get();
}
